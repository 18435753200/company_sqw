<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.mall.supplier.dao.SupplierUserRoleMapper" >
  <resultMap id="BaseResultMap" type="com.mall.supplier.model.SupplierUserRole" >
    <id column="link_id" property="linkId" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="role_id" property="roleId" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    link_id, user_id, role_id
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from s_supplier_user_role
    where link_id = #{linkId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from s_supplier_user_role
    where link_id = #{linkId,jdbcType=INTEGER}
  </delete>
  
   <!-- 批量删除角色用户关联数据 -->
  <delete id= "deleteAll" parameterType="java.util.List">
    delete from  s_supplier_user_role
    where link_id 	 in
    	<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
			#{item}
		</foreach>
  </delete >
  <!-- 批量删除角色用户关联数据 -->
  <delete id= "deleteAllByUserId" parameterType="java.util.List">
    delete from  s_supplier_user_role
    where user_id 	 in
    	<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
			#{item}
		</foreach>
  </delete >
      <!--查询role的用户个数-->
  <select id="countUserByRoleId" resultType="java.lang.Integer" parameterType="java.lang.Long" >
    select count(link_id)  from s_supplier_user_role
    where role_id = #{roleId,jdbcType=INTEGER}
    </select>
  
   <!-- 删除用户角色关联表 -->
    <delete id="deleteByUserId" parameterType="java.lang.Long" >
    delete from s_supplier_user_role
       where user_id = #{userId,jdbcType=INTEGER}
    </delete>
  
  <insert id="insert" parameterType="com.mall.supplier.model.SupplierUserRole" >
    insert into s_supplier_user_role (link_id, user_id, role_id
      )
    values (#{linkId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{roleId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.mall.supplier.model.SupplierUserRole" >
    insert into s_supplier_user_role
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="linkId != null" >
        link_id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="roleId != null" >
        role_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="linkId != null" >
        #{linkId,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="roleId != null" >
        #{roleId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.mall.supplier.model.SupplierUserRole" >
    update s_supplier_user_role
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="roleId != null" >
        role_id = #{roleId,jdbcType=INTEGER},
      </if>
    </set>
    where link_id = #{linkId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.mall.supplier.model.SupplierUserRole" >
    update s_supplier_user_role
    set user_id = #{userId,jdbcType=INTEGER},
        role_id = #{roleId,jdbcType=INTEGER}
    where link_id = #{linkId,jdbcType=INTEGER}
  </update>
  <update id="updateByUserId" parameterType="com.mall.supplier.model.SupplierUserRole" >
    update s_supplier_user_role
    set
           role_id = #{roleId,jdbcType=INTEGER}
    where  user_id = #{userId,jdbcType=INTEGER}
  </update>
  
</mapper>